<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="4" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="7690" started-at="2020-12-13T03:44:54Z" finished-at="2020-12-13T03:45:02Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="7690" started-at="2020-12-13T03:44:54Z" finished-at="2020-12-13T03:45:02Z">
      <class name="tests.ResourceTest">
        <test-method status="PASS" signature="setUpSuite()[pri:0, instance:tests.ResourceTest@28eaa59a]" name="setUpSuite" is-config="true" duration-ms="337" started-at="2020-12-13T03:44:54Z" finished-at="2020-12-13T03:44:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpSuite -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:tests.ResourceTest@28eaa59a]" name="setUp" is-config="true" duration-ms="1" started-at="2020-12-13T03:44:54Z" finished-at="2020-12-13T03:44:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="VerifyInvalidStatusCodeForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a]" name="VerifyInvalidStatusCodeForSingleResource" duration-ms="4297" started-at="2020-12-13T03:44:54Z" description="To verify response code for different inputs of resource id" data-provider="dataProviderForIterations" finished-at="2020-12-13T03:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{expectedResponseCode=404, expectedName=fuchsia rose, expectedYear=2001, ResourceId=abc123, expectedID=abc123, execute=yes, TestCaseName=VerifyInvalidStatusCodeForSingleResource, =}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyInvalidStatusCodeForSingleResource -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ResourceTest@28eaa59a]" name="afterMethod" is-config="true" duration-ms="3" started-at="2020-12-13T03:44:59Z" finished-at="2020-12-13T03:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyInvalidStatusCodeForSingleResource status=SUCCESS method=ResourceTest.VerifyInvalidStatusCodeForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="VerifyInvalidStatusCodeForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a]" name="VerifyInvalidStatusCodeForSingleResource" duration-ms="862" started-at="2020-12-13T03:44:59Z" description="To verify response code for different inputs of resource id" data-provider="dataProviderForIterations" finished-at="2020-12-13T03:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{expectedResponseCode=404, expectedName=fuchsia rose, expectedYear=2001, ResourceId=2.1, expectedID=2, execute=yes, TestCaseName=VerifyInvalidStatusCodeForSingleResource, =}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyInvalidStatusCodeForSingleResource -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:tests.ResourceTest@28eaa59a]" name="setUp" is-config="true" duration-ms="0" started-at="2020-12-13T03:44:59Z" finished-at="2020-12-13T03:44:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ResourceTest@28eaa59a]" name="afterMethod" is-config="true" duration-ms="1" started-at="2020-12-13T03:44:59Z" finished-at="2020-12-13T03:44:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyInvalidStatusCodeForSingleResource status=SUCCESS method=ResourceTest.VerifyInvalidStatusCodeForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:tests.ResourceTest@28eaa59a]" name="setUp" is-config="true" duration-ms="0" started-at="2020-12-13T03:44:59Z" finished-at="2020-12-13T03:44:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="VerifyInvalidStatusCodeForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a]" name="VerifyInvalidStatusCodeForSingleResource" duration-ms="972" started-at="2020-12-13T03:44:59Z" description="To verify response code for different inputs of resource id" data-provider="dataProviderForIterations" finished-at="2020-12-13T03:45:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{expectedResponseCode=500, expectedName=, expectedYear=, ResourceId=, expectedID=, execute=yes, TestCaseName=VerifyInvalidStatusCodeForSingleResource, =}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [500] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [500] but found [200]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:453)
at org.testng.Assert.assertEquals(Assert.java:463)
at tests.ResourceTest.VerifyInvalidStatusCodeForSingleResource(ResourceTest.java:66)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyInvalidStatusCodeForSingleResource -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ResourceTest@28eaa59a]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-12-13T03:45:00Z" finished-at="2020-12-13T03:45:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyInvalidStatusCodeForSingleResource status=FAILURE method=ResourceTest.VerifyInvalidStatusCodeForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="VerifyResponseDataForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a]" name="VerifyResponseDataForSingleResource" duration-ms="1511" started-at="2020-12-13T03:45:00Z" description="To fetch a single resource and validate the data" data-provider="dataProviderForIterations" finished-at="2020-12-13T03:45:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{expectedResponseCode=200, expectedName=fuchsia rose, expectedYear=2001, ResourceId=2, expectedID=2, execute=yes, TestCaseName=VerifyResponseDataForSingleResource, =}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyResponseDataForSingleResource -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:tests.ResourceTest@28eaa59a]" name="setUp" is-config="true" duration-ms="0" started-at="2020-12-13T03:45:00Z" finished-at="2020-12-13T03:45:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ResourceTest@28eaa59a]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-12-13T03:45:02Z" finished-at="2020-12-13T03:45:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyResponseDataForSingleResource status=SUCCESS method=ResourceTest.VerifyResponseDataForSingleResource(java.util.Hashtable)[pri:1, instance:tests.ResourceTest@28eaa59a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:tests.ResourceTest@28eaa59a]" name="afterSuite" is-config="true" duration-ms="1448" started-at="2020-12-13T03:45:02Z" finished-at="2020-12-13T03:45:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.ResourceTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
